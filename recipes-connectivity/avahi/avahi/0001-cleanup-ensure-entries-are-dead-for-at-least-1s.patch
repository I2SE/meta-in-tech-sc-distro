From 0a536f6082037d07ceae1404e95fec7cd40ff20c Mon Sep 17 00:00:00 2001
From: Trent Lloyd <trent@lloyd.id.au>
Date: Wed, 12 Feb 2020 16:24:45 +0800
Subject: [PATCH] cleanup: ensure entries are dead for at least 1s

If a dead AvahiEntry cleanup is scheduled, and we try to schedule
another one, defer the existing callback by 1s. Also remove other calls
to avahi_cleanup_dead_entries.

This is done to ensure that an entry stays in the dead state for at
least 1 second, so that if we receive a copy of our own probe we don't
think it's a conflict.

This should resolve issues where on startup the server spuriously
conflicts with itself and renames to hostname-2, hostname-3, etc. This
typically happens as addresses are rapidly added and removed, e.g. when
IPv6 global addresses cause the link local address to be revoked.

Ideally to prevent excess memory usage we would track the age of the
entries and expire them sooner to prevent the schedule being deferred
forever on a busy server.
---
 avahi-core/entry.c  | 16 +++++++++++++---
 avahi-core/server.c |  4 ----
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/avahi-core/entry.c b/avahi-core/entry.c
index 0d86213..27ee4c4 100644
--- a/avahi-core/entry.c
+++ b/avahi-core/entry.c
@@ -113,6 +113,8 @@ void avahi_entry_group_free(AvahiServer *s, AvahiSEntryGroup *g) {
 void avahi_cleanup_dead_entries(AvahiServer *s) {
     assert(s);
 
+    avahi_log_debug("avahi_cleanup_dead_entries()");
+
     if (s->need_group_cleanup) {
         AvahiSEntryGroup *g, *next;
 
@@ -1073,6 +1075,8 @@ static void cleanup_time_event_callback(AVAHI_GCC_UNUSED AvahiTimeEvent *e, void
 
     assert(s);
 
+    avahi_log_debug("cleanup_time_event_callback()");
+
     avahi_cleanup_dead_entries(s);
 }
 
@@ -1081,8 +1085,14 @@ static void schedule_cleanup(AvahiServer *s) {
 
     assert(s);
 
-    if (!s->cleanup_time_event)
+    avahi_log_debug("XXX schedule_cleanup()");
+    if (!s->cleanup_time_event) {
         s->cleanup_time_event = avahi_time_event_new(s->time_event_queue, avahi_elapse_time(&tv, 1000, 0), &cleanup_time_event_callback, s);
+    } else {
+        /* We rely on entries staying dead for 1s to prevent recently sent probes conflicting with a record that was just cleaned up. Ideally we would track the time each entry has been dead here. */
+        avahi_log_debug("XXX schedule_cleanup() already pending, deferred by 1s");
+        avahi_time_event_update(s->cleanup_time_event, avahi_elapse_time(&tv, 1000, 0));
+    }
 }
 
 void avahi_s_entry_group_free(AvahiSEntryGroup *g) {
@@ -1183,13 +1193,13 @@ void avahi_s_entry_group_reset(AvahiSEntryGroup *g) {
             e->dead = 1;
         }
     }
+
     g->server->need_entry_cleanup = 1;
+    schedule_cleanup(g->server);
 
     g->n_probing = 0;
 
     avahi_s_entry_group_change_state(g, AVAHI_ENTRY_GROUP_UNCOMMITED);
-
-    schedule_cleanup(g->server);
 }
 
 int avahi_entry_is_commited(AvahiEntry *e) {
diff --git a/avahi-core/server.c b/avahi-core/server.c
index a2580e3..cd519eb 100644
--- a/avahi-core/server.c
+++ b/avahi-core/server.c
@@ -1054,8 +1054,6 @@ static void mcast_socket_event(AvahiWatch *w, int fd, AvahiWatchEvent events, vo
             avahi_log_error("Incoming packet received on address that isn't local.");
 
         avahi_dns_packet_free(p);
-
-        avahi_cleanup_dead_entries(s);
     }
 }
 
@@ -1077,8 +1075,6 @@ static void legacy_unicast_socket_event(AvahiWatch *w, int fd, AvahiWatchEvent e
     if (p) {
         dispatch_legacy_unicast_packet(s, p);
         avahi_dns_packet_free(p);
-
-        avahi_cleanup_dead_entries(s);
     }
 }
 
-- 
2.17.1

